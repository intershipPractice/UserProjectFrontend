{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from './authSlice'; // authReducer 가져오기\nimport { loadState, saveState } from '../utils/sessionStorage';\n\n// 세션 스토리지에서 상태 불러오기\nconst preloadedState = loadState();\nconst store = configureStore({\n  reducer: {\n    auth: authReducer // auth 리듀서 연결\n  },\n  preloadedState // 세션 스토리지에서 불러온 상태로 초기화\n});\n\n// 상태 변경 시 세션 스토리지에 저장\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\n// 스토어 타입 내보내기\n\nexport default store;","map":{"version":3,"names":["configureStore","authReducer","loadState","saveState","preloadedState","store","reducer","auth","subscribe","getState"],"sources":["/Users/sykang/Desktop/UserProjectFrontend/src/store/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from './authSlice'; // authReducer 가져오기\nimport { loadState, saveState } from '../utils/sessionStorage';\n\n// 세션 스토리지에서 상태 불러오기\nconst preloadedState = loadState();\n\nconst store = configureStore({\n  reducer: {\n    auth: authReducer, // auth 리듀서 연결\n  },\n  preloadedState, // 세션 스토리지에서 불러온 상태로 초기화\n});\n\n// 상태 변경 시 세션 스토리지에 저장\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\n// 스토어 타입 내보내기\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,aAAa,CAAC,CAAC;AACvC,SAASC,SAAS,EAAEC,SAAS,QAAQ,yBAAyB;;AAE9D;AACA,MAAMC,cAAc,GAAGF,SAAS,CAAC,CAAC;AAElC,MAAMG,KAAK,GAAGL,cAAc,CAAC;EAC3BM,OAAO,EAAE;IACPC,IAAI,EAAEN,WAAW,CAAE;EACrB,CAAC;EACDG,cAAc,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAC,KAAK,CAACG,SAAS,CAAC,MAAM;EACpBL,SAAS,CAACE,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC;;AAEF;;AAIA,eAAeJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}