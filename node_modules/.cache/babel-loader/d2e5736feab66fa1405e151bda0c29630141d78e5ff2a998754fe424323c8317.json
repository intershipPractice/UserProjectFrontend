{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from './authSlice';\nimport { loadState, saveState } from '../utils/localStorage';\nconst preloadedState = loadState(); // 로컬 스토리지에서 상태 불러오기\n\nconst store = configureStore({\n  reducer: {\n    auth: authReducer\n  },\n  preloadedState // 초기 상태로 로컬 스토리지 값을 사용\n});\nstore.subscribe(() => {\n  saveState(store.getState()); // 상태가 변경될 때마다 저장\n});\nexport default store;","map":{"version":3,"names":["configureStore","authReducer","loadState","saveState","preloadedState","store","reducer","auth","subscribe","getState"],"sources":["/Users/sykang/Desktop/UserProjectFrontend/src/store/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from './authSlice';\nimport { loadState, saveState } from '../utils/localStorage';\n\nconst preloadedState = loadState(); // 로컬 스토리지에서 상태 불러오기\n\nconst store = configureStore({\n  reducer: {\n    auth: authReducer,\n  },\n  preloadedState, // 초기 상태로 로컬 스토리지 값을 사용\n});\n\nstore.subscribe(() => {\n    saveState(store.getState()); // 상태가 변경될 때마다 저장\n  });\n  \n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,aAAa;AACrC,SAASC,SAAS,EAAEC,SAAS,QAAQ,uBAAuB;AAE5D,MAAMC,cAAc,GAAGF,SAAS,CAAC,CAAC,CAAC,CAAC;;AAEpC,MAAMG,KAAK,GAAGL,cAAc,CAAC;EAC3BM,OAAO,EAAE;IACPC,IAAI,EAAEN;EACR,CAAC;EACDG,cAAc,CAAE;AAClB,CAAC,CAAC;AAEFC,KAAK,CAACG,SAAS,CAAC,MAAM;EAClBL,SAAS,CAACE,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC;AAMJ,eAAeJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}